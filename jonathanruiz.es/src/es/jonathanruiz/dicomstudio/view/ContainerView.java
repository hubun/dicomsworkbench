/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package es.jonathanruiz.dicomstudio.view;

import es.jonathanruiz.dicomstudio.controller.DicomStudioMain;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import vtk.vtk3DWidget;
import vtk.vtkActor;
import vtk.vtkProp;

/**
 *
 * @author jruiz
 */
public class ContainerView extends javax.swing.JPanel {
    private int resolution = 10; //10%x10% blocks
    private int usedCells = 0;
    private int totalColumns = resolution / 100;
    private int totalRows = resolution / 100;
    private ArrayList<ViewerView> viewerList = new ArrayList<>();
    private double[] axialCameraViewUp = {0,1,0}; 
    private double[] sagittalCameraViewUp = {0,0,-1};
    private double[] coronalCameraViewUp = {0,0,-1};
    private double[] axialCameraPosition = {0,0,1}; 
    private double[] sagittalCameraPosition = {1,0,0};
    private double[] coronalCameraPosition = {0,1,0};
    //private double[] xAxis = {1,0,0};
    
    
    public void rotateModel(double angle, String axis)
    {
        switch(axis)
        {
            case DicomStudioMain.AXIAL:
                DicomStudioMain.imageModel.rotate(0, 0, angle);
            break;
            case DicomStudioMain.SAGITTAL:
                DicomStudioMain.imageModel.rotate( angle, 0, 0);
            break;
            case DicomStudioMain.CORONAL:
                DicomStudioMain.imageModel.rotate( 0, angle, 0);
            break;
        }
    }
    
    public void setNewXAxis(double [] x_axis)
    {
        double diference [] = {1,0,0};
        diference[0] = x_axis[0] - diference[0];
        diference[1] = x_axis[1] - diference[1];
        diference[2] = x_axis[2] - diference[2];
        
        axialCameraViewUp[0] = axialCameraViewUp[0] + diference[0];
        axialCameraViewUp[1] = axialCameraViewUp[1] + diference[1];
        axialCameraViewUp[2] = axialCameraViewUp[2] + diference[2];
        
        sagittalCameraPosition[0] = sagittalCameraPosition[0] + diference[0]; 
        sagittalCameraPosition[1] = sagittalCameraPosition[1] + diference[1];
        sagittalCameraPosition[2] = sagittalCameraPosition[2] + diference[2];
        
        Iterator<ViewerView> itr = viewerList.iterator();
        //ViewerView viewer_view = itr.next();
        //viewer_view.add3DWidget(vtk_3d_widget);
        while (itr.hasNext()) {
          ViewerView viewer_view = itr.next();
          //viewer_view.addActor(vtk_actor);
        }
        
    }
    
    public void addViewer(ViewerView viewer)
    {
        viewer.setVisible(true);
        viewerList.add(viewer);
        this.add(viewer);
    }
    public Iterator<ViewerView> getViewerViewIterator()
    {
        return viewerList.iterator();
    }

    public ArrayList<ViewerView> getViewerList() {
        return viewerList;
    }
    
    public void add3DWidget(vtk3DWidget vtk_3d_widget )
    {
        //Iterator<ViewerView> itr = viewerList.iterator();
        //ViewerView viewer_view = itr.next();
        //viewer_view.add3DWidget(vtk_3d_widget);
        
       getViewerOverMouseCursor().add3DWidget(vtk_3d_widget);
        
        /*
        while (itr.hasNext()) {
          ViewerView viewer_view = itr.next();
          viewer_view.add3DWidget(vtk_3d_widget);
        }*/
    }
    public void addActor(vtkActor vtk_actor )
    {
        Iterator<ViewerView> itr = viewerList.iterator();
        //ViewerView viewer_view = itr.next();
        //viewer_view.add3DWidget(vtk_3d_widget);
        while (itr.hasNext()) {
          ViewerView viewer_view = itr.next();
          viewer_view.addActor(vtk_actor);
        }
    }
    public void addViewProp(vtkProp vtk_prop )
    {
        Iterator<ViewerView> itr = viewerList.iterator();
        //ViewerView viewer_view = itr.next();
        //viewer_view.add3DWidget(vtk_3d_widget);
        while (itr.hasNext()) {
          ViewerView viewer_view = itr.next();
          viewer_view.addViewProp(vtk_prop);
        }
    }
    public void deleteViewer(ViewerView viewer)
    {
        
    }
    public void getViewer(ViewerView viewer)
    {
        
    }
    public ViewerView getActiveViewer()
    {
       return  new ViewerView();
    }
    public ViewerView getViewerOverMouseCursor()
    {
        return  new ViewerView();
    }
    
    public ContainerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(java.awt.Color.black);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
